# FILE: docker-compose.yml
services:
  # Serviço do Backend (API)
  backend:
    build: ./backend
    ports:
      - "3000:3000"
      - "5555:5555"
    volumes:
      - ./backend:/app
      - /app/node_modules
    env_file:
      - .env
    # A dependência agora é mais simples, pois a lógica de espera está no 'command'
    depends_on:
      - db
      - redis
      - elasticsearch
    # CORREÇÃO: Usamos um 'command' para esperar ativamente pelo Elasticsearch
    # antes de iniciar a aplicação.
    command: >
      sh -c "
        echo 'A aguardar o Elasticsearch...'
        until curl -s http://elasticsearch:9200/_cluster/health?wait_for_status=yellow&timeout=1s; do
          echo -n '.'
          sleep 2
        done
        echo 'Elasticsearch está pronto!'
        bun run dev
      "

  # Serviço do Frontend (SvelteKit + Nginx)
  frontend:
    build: ./frontend
    ports:
      - "5173:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # ... (o resto dos serviços permanece igual) ...
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"

  elasticsearch:
    image: elasticsearch:8.11.3
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 10s
      timeout: 10s
      retries: 15

volumes:
  postgres_data:

